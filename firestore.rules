
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =============================================
    // Collections
    // =============================================

    // Users can read/update their own profile. Admins can read/write any profile.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated(); // Registration action handles setting correct data
      allow delete: if isAdmin();
    }

    // Counters collection is only writable by server-side logic (transactions). No client access.
    match /counters/{counterId} {
        allow read, write: if false;
    }

    // Activity logs are write-only for authenticated users (via server actions). No client read.
    match /activityLogs/{logId} {
      allow read, write: if false; // Only accessible via server actions
    }

    // Notifications: Users can read their own. No client-side creation.
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && isOwner(get(after:this).data.userId);
      allow create, delete: if false; // Only created/deleted by server actions
    }

    // Admin Notifications: Only readable/writable by admins.
    match /adminNotifications/{notificationId} {
        allow read, write: if isAdmin();
    }

    // Trading Accounts: Users can create and read their own. Admins can manage all.
    match /tradingAccounts/{accountId} {
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow update: if isAdmin(); // Only admins can approve/reject
      allow delete: if isAdmin();
    }

    // Cashback Transactions: Read-only for users. Admins can create.
    match /cashbackTransactions/{transactionId} {
        allow create: if false; // Only through server action
        allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow update, delete: if isAdmin();
    }

    // Withdrawals: Users can create and read their own. Admins can manage all.
    match /withdrawals/{withdrawalId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow update: if isAdmin(); // Only admins can approve/reject
        allow delete: if isAdmin();
    }

    // Brokers: Publicly readable by any authenticated user. Managed by admins.
    match /brokers/{brokerId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Blog Posts: Publicly readable if published. Managed by admins.
    match /blogPosts/{postId} {
        allow read: if resource.data.status == 'published';
        allow write: if isAdmin();
    }

    // Store Collections (Products, Categories, Orders)
    match /productCategories/{categoryId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /products/{productId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    match /orders/{orderId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
    
    // Payment Methods: Readable by users, writable by admin
    match /paymentMethods/{methodId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // Settings documents (e.g., for banner, loyalty): Readable by users, writable by admin
    match /settings/{settingId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // Loyalty Rules: Readable by users (implicitly via server), writable by admin
    match /pointsRules/{ruleId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // Feedback System
    match /feedbackForms/{formId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }
    
    match /feedbackResponses/{responseId} {
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow read: if isAdmin(); // Only admins can read all responses
        allow update, delete: if false;
    }
    
  }
}
